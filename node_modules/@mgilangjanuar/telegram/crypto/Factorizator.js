"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Factorizator = void 0;
const big_integer_1 = __importDefault(require("big-integer"));
const Helpers_1 = require("../Helpers");
class Factorizator {
    /**
     * Calculates the greatest common divisor
     * @param a {BigInteger}
     * @param b {BigInteger}
     * @returns {BigInteger}
     */
    static gcd(a, b) {
        while (b.neq(big_integer_1.default.zero)) {
            const temp = b;
            b = a.remainder(b);
            a = temp;
        }
        return a;
    }
    /**
     * Factorizes the given number and returns both the divisor and the number divided by the divisor
     * @param pq {BigInteger}
     * @returns {{p: *, q: *}}
     */
    static factorize(pq) {
        if (pq.remainder(2).equals(big_integer_1.default.zero)) {
            return { p: (0, big_integer_1.default)(2), q: pq.divide((0, big_integer_1.default)(2)) };
        }
        let y = big_integer_1.default.randBetween((0, big_integer_1.default)(1), pq.minus(1));
        const c = big_integer_1.default.randBetween((0, big_integer_1.default)(1), pq.minus(1));
        const m = big_integer_1.default.randBetween((0, big_integer_1.default)(1), pq.minus(1));
        let g = big_integer_1.default.one;
        let r = big_integer_1.default.one;
        let q = big_integer_1.default.one;
        let x = big_integer_1.default.zero;
        let ys = big_integer_1.default.zero;
        let k;
        while (g.eq(big_integer_1.default.one)) {
            x = y;
            for (let i = 0; (0, big_integer_1.default)(i).lesser(r); i++) {
                y = (0, Helpers_1.modExp)(y, (0, big_integer_1.default)(2), pq).add(c).remainder(pq);
            }
            k = big_integer_1.default.zero;
            while (k.lesser(r) && g.eq(big_integer_1.default.one)) {
                ys = y;
                const condition = big_integer_1.default.min(m, r.minus(k));
                for (let i = 0; (0, big_integer_1.default)(i).lesser(condition); i++) {
                    y = (0, Helpers_1.modExp)(y, (0, big_integer_1.default)(2), pq).add(c).remainder(pq);
                    q = q.multiply(x.minus(y).abs()).remainder(pq);
                }
                g = Factorizator.gcd(q, pq);
                k = k.add(m);
            }
            r = r.multiply(2);
        }
        if (g.eq(pq)) {
            while (true) {
                ys = (0, Helpers_1.modExp)(ys, (0, big_integer_1.default)(2), pq).add(c).remainder(pq);
                g = Factorizator.gcd(x.minus(ys).abs(), pq);
                if (g.greater(1)) {
                    break;
                }
            }
        }
        const p = g;
        q = pq.divide(g);
        return p < q ? { p: p, q: q } : { p: q, q: p };
    }
}
exports.Factorizator = Factorizator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmFjdG9yaXphdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vZ3JhbWpzL2NyeXB0by9GYWN0b3JpemF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsOERBQWlDO0FBQ2pDLHdDQUFvQztBQUVwQyxNQUFhLFlBQVk7SUFDckI7Ozs7O09BS0c7SUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQW9CLEVBQUUsQ0FBb0I7UUFDakQsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLHFCQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1lBQ2YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsQ0FBQyxHQUFHLElBQUksQ0FBQztTQUNaO1FBQ0QsT0FBTyxDQUFDLENBQUM7SUFDYixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBcUI7UUFDbEMsSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxxQkFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3JDLE9BQU8sRUFBRSxDQUFDLEVBQUUsSUFBQSxxQkFBTSxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUEscUJBQU0sRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDcEQ7UUFDRCxJQUFJLENBQUMsR0FBRyxxQkFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFBLHFCQUFNLEVBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25ELE1BQU0sQ0FBQyxHQUFHLHFCQUFNLENBQUMsV0FBVyxDQUFDLElBQUEscUJBQU0sRUFBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMs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