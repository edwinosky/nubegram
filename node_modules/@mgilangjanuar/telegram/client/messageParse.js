"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._getResponseMessage = exports._parseMessageText = exports._replaceWithMention = exports.DEFAULT_DELIMITERS = void 0;
const Utils_1 = require("../Utils");
const tl_1 = require("../tl");
const index_1 = require("../index");
const Helpers_1 = require("../Helpers");
const big_integer_1 = __importDefault(require("big-integer"));
exports.DEFAULT_DELIMITERS = {
    "**": tl_1.Api.MessageEntityBold,
    __: tl_1.Api.MessageEntityItalic,
    "~~": tl_1.Api.MessageEntityStrike,
    "`": tl_1.Api.MessageEntityCode,
    "```": tl_1.Api.MessageEntityPre,
};
/** @hidden */
async function _replaceWithMention(client, entities, i, user) {
    try {
        entities[i] = new tl_1.Api.InputMessageEntityMentionName({
            offset: entities[i].offset,
            length: entities[i].length,
            userId: (await client.getInputEntity(user)),
        });
        return true;
    }
    catch (e) {
        return false;
    }
}
exports._replaceWithMention = _replaceWithMention;
/** @hidden */
async function _parseMessageText(client, message, parseMode) {
    if (parseMode == false) {
        return [message, []];
    }
    if (parseMode == undefined) {
        if (client.parseMode == undefined) {
            return [message, []];
        }
        parseMode = client.parseMode;
    }
    else if (typeof parseMode === "string") {
        parseMode = (0, Utils_1.sanitizeParseMode)(parseMode);
    }
    const [rawMessage, msgEntities] = parseMode.parse(message);
    for (let i = msgEntities.length - 1; i >= 0; i--) {
        const e = msgEntities[i];
        if (e instanceof tl_1.Api.MessageEntityTextUrl) {
            const m = /^@|\+|tg:\/\/user\?id=(\d+)/.exec(e.url);
            if (m) {
                const userIdOrUsername = m[1] ? Number(m[1]) : e.url;
                const isMention = await _replaceWithMention(client, msgEntities, i, userIdOrUsername);
                if (!isMention) {
                    msgEntities.splice(i, 1);
                }
            }
        }
    }
    return [rawMessage, msgEntities];
}
exports._parseMessageText = _parseMessageText;
/** @hidden */
function _getResponseMessage(client, request, result, inputChat) {
    let updates = [];
    let entities = new Map();
    if (result instanceof tl_1.Api.UpdateShort) {
        updates = [result.update];
    }
    else if (result instanceof tl_1.Api.Updates ||
        result instanceof tl_1.Api.UpdatesCombined) {
        updates = result.updates;
        for (const x of [...result.users, ...result.chats]) {
            entities.set(index_1.utils.getPeerId(x), x);
        }
    }
    else {
        return;
    }
    const randomToId = new Map();
    const idToMessage = new Map();
    const schedToMessage = new Map();
    for (const update of updates) {
        if (update instanceof tl_1.Api.UpdateMessageID) {
            randomToId.set(update.randomId.toString(), update.id);
        }
        else if (update instanceof tl_1.Api.UpdateNewChannelMessage ||
            update instanceof tl_1.Api.UpdateNewMessage) {
            update.message._finishInit(client, entities, inputChat);
            if ("randomId" in request || (0, Helpers_1.isArrayLike)(request)) {
                idToMessage.set(update.message.id, update.message);
            }
            else {
                return update.message;
            }
        }
        else if (update instanceof tl_1.Api.UpdateEditMessage &&
            "peer" in request &&
            (0, Helpers_1._entityType)(request.peer) != Helpers_1._EntityType.CHANNEL) {
            update.message._finishInit(client, entities, inputChat);
            if ("randomId" in request) {
                idToMessage.set(update.message.id, update.message);
            }
            else if ("id" in request && request.id === update.message.id) {
                return update.message;
            }
        }
        else if (update instanceof tl_1.Api.UpdateEditChannelMessage &&
            "peer" in request &&
            (0, Utils_1.getPeerId)(request.peer) ==
                (0, Utils_1.getPeerId)(update.message.peerId)) {
            if (request.id == update.message.id) {
                update.message._finishInit(client, entities, inputChat);
                return update.message;
            }
        }
        else if (update instanceof tl_1.Api.UpdateNewScheduledMessage) {
            update.message._finishInit(client, entities, inputChat);
            schedToMessage.set(update.message.id, update.message);
        }
        else if (update instanceof tl_1.Api.UpdateMessagePoll) {
            if (request.media.poll.id == update.pollId) {
                const m = new tl_1.Api.Message({
                    id: request.id,
                    peerId: index_1.utils.getPeerId(request.peer),
                    media: new tl_1.Api.MessageMediaPoll({
                        poll: update.poll,
                        results: update.results,
                    }),
                    message: "",
                    date: 0,
                });
                m._finishInit(client, entities, inputChat);
                return m;
            }
        }
    }
    if (request == undefined) {
        return idToMessage;
    }
    let mapping;
    let opposite = new Map();
    if ("scheduleDate" in request && request.scheduleDate != undefined) {
        mapping = schedToMessage;
        opposite = idToMessage;
    }
    else {
        mapping = idToMessage;
    }
    let randomId = (0, Helpers_1.isArrayLike)(request) ||
        typeof request == "number" ||
        big_integer_1.default.isInstance(request)
        ? request
        : request.randomId.toString();
    if (!randomId) {
        client._log.warn(`No randomId in ${request} to map to. returning undefined for ${result}`);
        return undefined;
    }
    if (!(0, Helpers_1.isArrayLike)(randomId)) {
        let msg = mapping.get(randomToId.get(randomId));
        if (!msg) {
            msg = opposite.get(randomToId.get(randomId));
        }
        if (!msg) {
            client._log.warn(`Request ${request.className} had missing message mapping ${result.className}`);
        }
        return msg;
    }
    else {
        let arrayRandomId = randomId;
        const mappingToReturn = [];
        let warned = false;
        for (let i = 0; i < arrayRandomId.length; i++) {
            const tempRandom = arrayRandomId[i];
            if (tempRandom == undefined) {
                warned = true;
                break;
            }
            const rnd = tempRandom.toString();
            const msgId = randomToId.get(rnd);
            if (msgId == undefined) {
                warned = true;
                break;
            }
            const msg = mapping.get(msgId);
            if (!msg) {
                warned = true;
                break;
            }
            else {
                mappingToReturn.push(msg);
            }
        }
        if (!warned) {
            return mappingToReturn;
        }
        const oppositeToReturn = [];
        warned = false;
        for (let i = 0; i < randomId.length; i++) {
            const rnd = randomId[i] + "";
            const msg = opposite.get(randomToId.get(rnd));
            if (!msg) {
                client._log.warn(`Request ${request} had missing message mapping ${result}`);
                warned = true;
                break;
            }
            else {
                oppositeToReturn.push(msg);
            }
        }
        if (!warned) {
            return mappingToReturn;
        }
    }
    const finalToReturn = [];
    for (let i = 0; i < randomId.length; i++) {
        const rnd = randomId[i] + "";
        if (randomToId.has(rnd)) {
            finalToReturn.push(mapping.get(randomToId.get(rnd)) ||
                opposite.get(randomToId.get(rnd)));
        }
    }
    return finalToReturn;
}
exports._getResponseMessage = _getResponseMessage;
//# sourceMappingURL=data:application/json;base64,